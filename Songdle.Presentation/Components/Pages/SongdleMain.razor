@page "/"
@using Songdle.Application.DTOs
@using Songdle.Application.Interfaces
@inject ISongProcessingService SongProcessingService
@inject ITodaysGameProcessingService TodaysGameProcessingService
@inject IGuessProcessingService GuessProcessingService

@rendermode InteractiveServer
<PageTitle>Songdle</PageTitle>

<div class="container mt-5">
    <h2 class="text-center mb-4">🎵 Songdle</h2>

    <div class="position-relative">
        <input type="text" class="form-control" placeholder="Wpisz tytuł piosenki..." @bind="guessInput"
            @oninput="OnInputChanged" />
            

        @if (suggestions.Any())
        {
            <ul class="list-group position-absolute w-100 z-3 shadow" style="max-height: 200px; overflow-y: auto;">
                @foreach (var suggestion in suggestions)
                {
                    <li class="list-group-item list-group-item-action" @onclick="() => SelectSuggestion(suggestion)">
                        @suggestion.Artist - @suggestion.Title
                    </li>
                }
            </ul>
        }
        <button class="btn btn-success mt-3" @onclick="SubmitGuess" disabled="@(!isSongSelected)">Zgaduję</button>
    </div>

    

    @if (guessResults.Any())
    {
        <h4 class="mt-4">Twoje próby:</h4>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Tytuł</th>
                    <th>Artysta</th>
                    <th>Album</th>
                    <th>Rok</th>
                    <th>Kraj</th>
                    <th>Gatunek</th>
                    <th>Featy</th>
                </tr>
            </thead>
            <tbody>
               @for (int i = guessResults.Count - 1; i >= 0; i--)
{
    var result = guessResults[i];
    var check = answerResults[i];

    <tr>
        <td class="@GetColorClass(check.TitleCheck)">
            @result.Title
        </td>
        <td class="@GetBoolColor(check.ArtistCheck)">
            @result.Artist
        </td>
        <td class="@GetBoolColor(check.AlbumCheck)">
            @result.Album
        </td>
        <td class="@GetDateCell(result.ReleaseDate.Year, check.ReleaseDateCheck)">
            @result.ReleaseDate.Year
        </td>
        <td class="@GetBoolColor(check.CountryCheck)">
            @result.Country
        </td>
        <td class="@GetBoolColor(check.GenreCheck)">
            @result.Genre
        </td>
        <td class="@GetFeatsColor(check.FeatsCheck)">
            @string.Join(", ", result.Feats)
        </td>
    </tr>
}
            </tbody>
        </table>
    }

    @if (isCorrect)
    {
        <div class="alert alert-success mt-3">
            🎉 Gratulacje! Odgadłeś piosenkę!
        </div>
    }
</div>

@code {
    private string guessInput = "";
    private SongDto? selectedSong = null;
    private List<SongDto> suggestions = new();
    private List<SongDto> guessResults = new();
    private List<AnswerCheckDto> answerResults = new();
    private TodaysGameDto todaysGame;
    private bool isCorrect = false;
    private bool isLoadingGame = false;

    private bool isSongSelected => selectedSong != null;

    protected override async Task OnInitializedAsync()
    {
        await GetTodaysGame();
    }

    private async Task GetTodaysGame()
    {
        try
        {
            isLoadingGame = true;
            todaysGame = await TodaysGameProcessingService.GetTodaysGameAsync(DateTime.UtcNow.Date);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas pobierania dzisiejszej gry: {ex.Message}");
        }
        finally
        {
            isLoadingGame = false;
        }
    }

    private async Task OnInputChanged(ChangeEventArgs e)
    {
        guessInput = e.Value?.ToString() ?? "";
        selectedSong = null;

        if (guessInput.Length >= 2)
        {
            suggestions = (await SongProcessingService.SearchSongsByTitleAsync(guessInput)).ToList();
        }
        else
        {
            suggestions.Clear();
        }
    }

    private void SelectSuggestion(SongDto song)
    {
        selectedSong = song;
        guessInput = song.Title;
        suggestions.Clear();
    }

    private async Task SubmitGuess()
    {
        if (selectedSong is not null)
        {
            guessResults.Add(selectedSong);

            var answerDto = await GuessProcessingService.GetAnswerDto(selectedSong);
            var answerCheck = GuessProcessingService.GuessSong(answerDto, todaysGame).Result;

            answerResults.Add(answerCheck);

            isCorrect = selectedSong.Id == todaysGame.SongOfTheDayId;
            //Console.WriteLine($"Zgadnięto piosenkę: {selectedSong.Title} - Poprawność: {isCorrect}");
            //Console.WriteLine($"Dzisiejsza piosenka: {todaysGame.SongOfTheDay?.Title} (ID: {todaysGame.SongOfTheDayId})");
        }

        guessInput = "";
        selectedSong = null;

    }


    private string GetColorClass(int check)
    {
        return check switch
        {
            1 => "text-success", // zielony
            2 => "text-warning", // pomarańczowy
            _ => "text-danger" // czerwony
        };
    }

    private string GetBoolColor(bool value) => value ? "text-success" : "text-danger";

    private MarkupString GetDateCell(int year, int check)
    {
        var icon = check switch
        {
            1 => "", // trafiony
            0 => " 🔼", // zgadujący podał datę wcześniejszą
            2 => " 🔽", // podał późniejszą
            _ => ""
        };

        return new MarkupString($"<span class='{GetColorClass(check)}'>{year}{icon}</span>");
    }

    private string GetFeatsColor(int check) => GetColorClass(check);

}
