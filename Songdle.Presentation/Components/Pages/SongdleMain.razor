@page "/"
@using Songdle.Application.DTOs
@using Songdle.Application.Interfaces
@inject ISongProcessingService SongProcessingService

@rendermode InteractiveServer
<PageTitle>Songdle</PageTitle>

<div class="container mt-5">
    <h2 class="text-center mb-4">🎵 Songdle</h2>

    <div class="position-relative">
        <input type="text" class="form-control" placeholder="Wpisz tytuł piosenki..." 
               @bind="guessInput" @oninput="OnInputChanged" />

        @if (suggestions.Any())
        {
            <ul class="list-group position-absolute w-100 z-3 shadow" style="max-height: 200px; overflow-y: auto;">
                @foreach (var suggestion in suggestions)
                {
                    <li class="list-group-item list-group-item-action" 
                        @onclick="() => SelectSuggestion(suggestion)">
                        @suggestion.Title
                    </li>
                }
            </ul>
        }
    </div>

    <button class="btn btn-success mt-3" @onclick="SubmitGuess" disabled="@(!isSongSelected)">Zgaduję</button>

    @if (guessResults.Any())
    {
        <h4 class="mt-4">Twoje próby:</h4>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Tytuł</th>
                    <th>Artysta</th>
                    <th>Album</th>
                    <th>Rok</th>
                    <th>Kraj</th>
                    <th>Gatunek</th>
                    <th>Featy</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var result in guessResults)
                {
                    <tr>
                        <td>@result.Title</td>
                        <td>@result.Artist</td>
                        <td>@result.Album</td>
                        <td>@result.ReleaseDate.Year</td>
                        <td>@result.Country</td>
                        <td>@result.Genre</td>
                        <td>@string.Join(", ", result.Feats)</td>
                    </tr>
                }
            </tbody>
        </table>
    }

    @if (isCorrect)
    {
        <div class="alert alert-success mt-3">
            🎉 Gratulacje! Odgadłeś piosenkę!
        </div>
    }
</div>

@code {
    private string guessInput = "";
    private SongDto? selectedSong = null;
    private List<SongDto> suggestions = new();
    private List<SongDto> guessResults = new();
    private bool isCorrect = false;

    private bool isSongSelected => selectedSong != null;

     private async Task OnInputChanged(ChangeEventArgs e)
    {
        guessInput = e.Value?.ToString() ?? "";
        selectedSong = null;

        if (guessInput.Length >= 2)
        {
            suggestions = (await SongProcessingService.SearchSongsByTitleAsync(guessInput)).ToList();
        }
        else
        {
            suggestions.Clear();
        }
    }

    private void SelectSuggestion(SongDto song)
    {
        selectedSong = song;
        guessInput = song.Title;
        suggestions.Clear();
    }

   private Task SubmitGuess()
    {
        if (selectedSong is not null)
        {
            guessResults.Add(selectedSong);
            isCorrect = true; // lub: porównanie z ukrytą piosenką
        }

        guessInput = "";
        selectedSong = null;

        return Task.CompletedTask;
    }
    }
}
