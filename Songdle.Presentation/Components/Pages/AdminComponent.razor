@page "/admin"
@attribute [Authorize(Roles = "Admin")]
@using Microsoft.AspNetCore.Authorization
@using Songdle.Application.DTOs
@using Songdle.Application.Interfaces

@rendermode InteractiveServer
@inject ISongProcessingService SongProcessingService
@inject ITodaysGameProcessingService TodaysGameProcessingService
@inject IAdminConsole AdminConsole

<PageTitle>Admin Panel</PageTitle>

<h3>Wyszukaj piosenkę</h3>
<div class="input-group mb-3">
    <input type="text" class="form-control" placeholder="Wpisz tytuł lub wykonawcę..." @bind="searchQuery"
        @bind:event="oninput" />
    <button class="btn btn-primary" @onclick="SearchSongs" disabled="@isLoading">
        Szukaj
    </button>
</div>

@if (isLoading)
{
    <p>Wyszukiwanie...</p>
}

@if (songs != null && songs.Any())
{
    <div style="height: 25vh; overflow-y: auto; border: 1px solid #ccc; padding: 10px; border-radius: 6px;">
        <ul class="list-unstyled">
            @foreach (var song in songs)
            {
                <li class="mb-2">
                    <strong>@song.Title</strong> - @song.Artist (@song.Album)
                    <button class="btn btn-sm btn-success ms-2" @onclick="() => SetTodaysGame(song.SpotifyId)">
                        Ustaw jako dzisiejszą id:
                        @song.SpotifyId
                    </button>
                </li>
            }
        </ul>
    </div>
}
else if (!string.IsNullOrWhiteSpace(searchQuery) && !isLoading)
{
    <p>Brak wyników.</p>
}






@code {
    private IEnumerable<SongDto> songs = new List<SongDto>();
    private bool isLoading = false;

    private string searchQuery = "";


    private async Task SearchSongs()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            return;
        }

        try
        {
            isLoading = true;
            songs = await SongProcessingService.SearchSongsByTitleAsync(searchQuery);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error searching songs: {ex.Message}");
            songs = new List<SongDto>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SetTodaysGame(string songId)
    {
        try
        {
            isLoading = true;
            await TodaysGameProcessingService.SetTodaysGameAsync(DateTime.UtcNow.Date, songId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error setting today's game: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }


}
