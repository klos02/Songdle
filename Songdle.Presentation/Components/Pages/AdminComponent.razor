@page "/admin"
@attribute [Authorize(Roles = "Admin")]
@using Microsoft.AspNetCore.Authorization
@using Songdle.Application.DTOs
@using Songdle.Application.Interfaces

@rendermode InteractiveServer
@inject ISongProcessingService SongProcessingService
@inject ITodaysGameProcessingService TodaysGameProcessingService
@inject IAdminConsole AdminConsole

<PageTitle>Admin Panel</PageTitle>

<button class="btn btn-primary" @onclick="GetSongs">GetSongs</button>

@if (isLoading)
{
    <p>Loading songs...</p>
}


@if (songs != null && songs.Any())
{
    <div style="height: 25vh; overflow-y: auto; border: 1px solid #ccc; padding: 10px; border-radius: 6px;">
        <ul class="list-unstyled">
            @foreach (var song in songs)
            {
                <li class="mb-2">
                    <strong>@song.Title</strong> - @song.Artist - @song.Album
                    <button class="btn btn-sm btn-secondary ms-2" @onclick="() => SetTodaysGame(song.Id)">
                        Ustaw jako dzisiejszą
                    </button>
                </li>
            }
        </ul>
    </div>
}


<h3>Dodaj piosenkę z JSON</h3>

<textarea class="form-control" @bind="jsonInput" rows="10" placeholder="Wklej JSON tutaj"></textarea>
<button class="btn btn-success mt-2" @onclick="SubmitJson">Dodaj z JSON</button>

<hr />

<h3>Dodaj piosenkę z pliku JSON</h3>






@code {
    private IEnumerable<SongDto> songs = new List<SongDto>();
    private bool isLoading = false;

    private string jsonInput = "";



    private async Task SubmitJson()
    {
        try
        {
            await AdminConsole.AddSongFromJsonAsync(jsonInput);
            jsonInput = "";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding song from JSON: {ex.Message}");
        }
        finally
        {
            await GetSongs();
        }
    }
    private async Task GetSongs()
    {
        try
        {
            isLoading = true;
            songs = await SongProcessingService.GetAllSongsAsync();
        }
        catch (Exception ex)
        {

            Console.WriteLine($"Error fetching songs: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }

    }

    private async Task SetTodaysGame(int songId)
    {
        try
        {
            isLoading = true;
            await TodaysGameProcessingService.SetTodaysGameAsync(DateTime.UtcNow.Date, songId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error setting today's game: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }


}
